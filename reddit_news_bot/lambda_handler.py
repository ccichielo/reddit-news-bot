import re
import html2text
from reddit_news_bot.secrets import get_secret
from reddit_news_bot.dynamo_connection import DynamoConnection
from reddit_news_bot.reddit_poster import RedditPoster
from reddit_news_bot.content_scraper import get_latest_post


# real
# NEWS_FLAIR = "4b9a56d8-550e-11ea-9b5f-0eb649837073"
# fake
NEWS_FLAIR = "049eb712-46fc-11ef-bc57-fee14a5d86b6"

# real
# SUBREDDIT_NAME = 'eq2'
# fake
SUBREDDIT_NAME = 'eq2apitesting'

ANNOUNCEMENTS_URL = "https://forums.everquest2.com/index.php?forums/announcements.11/"
UPDATE_NOTES_URL = "https://forums.everquest2.com/index.php?forums/update-notes.12/"
ROOT_URL = "https://forums.everquest2.com"

TABLE_NAME = "eq2-news-history"

def handler(event, context):
    secret = get_secret()
    reddit_poster = RedditPoster(
        username=secret['reddit_user'],
        password=secret['reddit_password'],
        client_id=secret['reddit_api_client'],
        client_secret=secret['reddit_api_secret'], 
        subreddit_name=SUBREDDIT_NAME
    )
    dynamo_connection = DynamoConnection(TABLE_NAME)

    sticky_class_name='structItemContainer-group structItemContainer-group--sticky'
    thread_list_class_name='structItemContainer-group js-threadList'
    announcement_title, announcement_latest_sticky_content, announcement_post_url = get_latest_post(ROOT_URL, ANNOUNCEMENTS_URL, sticky_class_name)
    update_notes_title, update_notes_latest_post_content, update_notes_post_url = get_latest_post(ROOT_URL, UPDATE_NOTES_URL, thread_list_class_name)

    __post_if_not_already_posted(reddit_poster, dynamo_connection, announcement_title, announcement_latest_sticky_content, announcement_post_url)
    __post_if_not_already_posted(reddit_poster, dynamo_connection, update_notes_title, update_notes_latest_post_content, update_notes_post_url)

def __post_if_not_already_posted(reddit_poster: RedditPoster, dynamo_connection: DynamoConnection, title, content, url):
    if dynamo_connection.item_exists(url):
        print(f'Already posted item with url: {url}')
        return

    markdown = __clean_and_convert_html_to_markdown(content)
    markdown = __add_link_and_bot_tag(url, markdown)
    reddit_poster.submit(title, markdown, NEWS_FLAIR)

    dynamo_connection.add_item(url)

def __add_link_and_bot_tag(post_url, markdown_content):
    link_markdown = f'[{post_url}]({post_url})\n\n'
    bot_tag = '\n\n This post was generated by u/eq2-bot - if there are any issues please message the moderators'
    return link_markdown + markdown_content + bot_tag


def __clean_and_convert_html_to_markdown(html_content):
    for div in html_content.find_all('div', class_='bbWrapper'):
        div.decompose()
    for img in html_content.find_all('img'):
        img.decompose()
    for a in html_content.find_all('a', class_='link link--external'):
        a.decompose()

    markdown_content = html2text.html2text(str(html_content))
    return __post_process_markdown(markdown_content)

def __post_process_markdown(markdown_content):
    # Remove Markdown image syntax
    markdown_content = re.sub(r'!\[.*?\]\(.*?\)', '', markdown_content)

    # Remove any remaining unwanted HTML tags
    markdown_content = re.sub(r'<[^>]+>', '', markdown_content)

    return markdown_content
